version: "3"

services:
  flask:
    build: .
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:5000 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - $FLASK_PORT:5000
    user: "1000:1000"
    volumes:
      - ./project:/app:z
      - output:/app/data:z
    command: python main.py
    depends_on:
      - postgres
    container_name: flask
    networks:
      network:
        ipv4_address: $FLASK_HOST

  nginx:
    image: 'nginx:1.23.3-alpine'
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - ./project:/var/www:z
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:z
    depends_on:
      - flask
    restart: unless-stopped
    ports:
      - $NGINX_PORT:80
    container_name: nginx
    networks:
      network:
        ipv4_address: $NGINX_HOST

  postgres:
    image: 'postgres:alpine3.17'
    environment:
      POSTGRES_PASSWORD: $POSTG_PASW
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./dump:/docker-entrypoint-initdb.d:z
      - output:/var/lib/postgresql/output:z
    ports:
      - $POSTG_PORT:5432
    user: 70:70
    container_name: postgres
    networks:
      network:
        ipv4_address: $POSTG_HOST

  pgadmin:
    image: 'dpage/pgadmin4:6.20'
    environment:
      PGADMIN_DEFAULT_EMAIL: $PGADMIN_EMAIL
      PGADMIN_DEFAULT_PASSWORD: $PGADMIN_PASWD
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://127.0.0.1:8432 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    ports:
      - $PGADM_PORT:80
    depends_on:
      - postgres
    container_name: pgadmin
    networks:
      network:
        ipv4_address: $PGADM_HOST

networks:
  network:
    driver: bridge
    ipam:
      config:
        - subnet: $NETWK_ADDR
          gateway: $NETWK_GATE

volumes:
  output:
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/project/data/
